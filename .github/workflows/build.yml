name: Build and Deploy Cbot Website

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint --if-present
      continue-on-error: true
    
    - name: Build website
      run: npm run build
      env:
        NODE_ENV: production
    
    - name: Run tests
      run: npm test
      continue-on-error: true
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: website-build-${{ matrix.node-version }}
        path: dist/
        retention-days: 30

    - name: Setup Pages (Node 20.x only)
      if: matrix.node-version == '20.x' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
      uses: actions/configure-pages@v4

    - name: Upload to GitHub Pages (Node 20.x only)
      if: matrix.node-version == '20.x' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
      uses: actions/upload-pages-artifact@v3
      with:
        path: dist/

  deploy:
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  security-scan:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level=moderate
      continue-on-error: true

    - name: Check for high severity vulnerabilities
      run: |
        if npm audit --audit-level=high --json | jq '.vulnerabilities | length > 0' 2>/dev/null; then
          echo "⚠️ High severity vulnerabilities found!"
          npm audit --audit-level=high
        else
          echo "✅ No high severity vulnerabilities found"
        fi
      continue-on-error: true

  lighthouse:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build website
      run: npm run build
    
    - name: Serve website
      run: npm run preview &
      
    - name: Wait for server
      run: sleep 10
    
    - name: Install Lighthouse CI
      run: npm install -g @lhci/cli@0.12.x

    - name: Run Lighthouse CI
      run: lhci autorun --upload.target=temporary-public-storage --collect.staticDistDir=dist
      continue-on-error: true

  performance-test:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: website-build-20.x
        path: dist/

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'

    - name: Install serve
      run: npm install -g serve

    - name: Check bundle size
      run: |
        echo "📦 Bundle Size Analysis:"
        du -sh dist/
        echo ""
        echo "📄 Individual file sizes:"
        find dist/ -name "*.js" -o -name "*.css" | xargs ls -lh
        echo ""
        echo "🎯 Checking for large files (>500KB):"
        find dist/ -size +500k -type f || echo "✅ No large files found"
        echo ""
        echo "📊 Total JavaScript size:"
        find dist/ -name "*.js" -exec du -ch {} + | tail -1
        echo "🎨 Total CSS size:"
        find dist/ -name "*.css" -exec du -ch {} + | tail -1

  notify:
    runs-on: ubuntu-latest
    needs: [build, deploy]
    if: always() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.build.result }}" == "success" ] && [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "✅ Cbot Website deployed successfully!"
          echo "🌐 Live at: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
          echo "📦 Build completed with JavaScript modules"
          echo "⚡ Performance optimized build ready"
        else
          echo "❌ Deployment failed!"
          echo "Build status: ${{ needs.build.result }}"
          echo "Deploy status: ${{ needs.deploy.result }}"
          echo "Please check the logs for more information."
        fi
